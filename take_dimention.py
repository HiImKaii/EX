#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ch∆∞∆°ng tr√¨nh gh√©p d·ªØ li·ªáu CSV
L·∫•y c·ªôt 2 v√† 3 t·ª´ file CSV l·ªõn ƒë·ªÉ b·ªï sung v√†o file CSV nh·ªè
"""

import pandas as pd
import os
import sys
from pathlib import Path

def read_csv_file(file_path, encoding='utf-8'):
    """ƒê·ªçc file CSV v·ªõi nhi·ªÅu encoding kh√°c nhau"""
    encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252', 'iso-8859-1']
    
    for enc in encodings:
        try:
            df = pd.read_csv(file_path, encoding=enc)
            print(f"‚úì ƒê√£ ƒë·ªçc file: {file_path}")
            print(f"  - Encoding: {enc}")
            print(f"  - S·ªë d√≤ng: {len(df)}")
            print(f"  - S·ªë c·ªôt: {len(df.columns)}")
            print(f"  - T√™n c·ªôt: {list(df.columns[:5])}{'...' if len(df.columns) > 5 else ''}")
            return df, enc
        except Exception as e:
            print(f"  Th·ª≠ encoding {enc}... ‚úó ({e})")
            continue
    
    print(f"‚úó Kh√¥ng th·ªÉ ƒë·ªçc file {file_path} v·ªõi c√°c encoding th·ª≠ nghi·ªám")
    return None, None

def merge_csv_files(large_file_path, small_file_path, output_file_path):
    """
    Gh√©p d·ªØ li·ªáu t·ª´ 2 file CSV
    
    Args:
        large_file_path: ƒê∆∞·ªùng d·∫´n file l·ªõn (c√≥ ƒë·∫ßy ƒë·ªß c·ªôt)
        small_file_path: ƒê∆∞·ªùng d·∫´n file nh·ªè (thi·∫øu 2 c·ªôt ƒë·∫ßu)
        output_file_path: ƒê∆∞·ªùng d·∫´n file k·∫øt qu·∫£
    """
    
    print("=" * 60)
    print("üîó B·∫ÆT ƒê·∫¶U X·ª¨ L√ù GH√âP D·ªÆ LI·ªÜU CSV")
    print("=" * 60)
    
    # ƒê·ªçc file l·ªõn
    print("\n1. ƒê·ªçc file CSV l·ªõn...")
    large_df, large_encoding = read_csv_file(large_file_path)
    if large_df is None:
        return False
    
    # ƒê·ªçc file nh·ªè
    print("\n2. ƒê·ªçc file CSV nh·ªè...")
    small_df, small_encoding = read_csv_file(small_file_path)
    if small_df is None:
        return False
    
    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
    print(f"\nüìä TH√îNG TIN CHI TI·∫æT:")
    print(f"   File l·ªõn: {len(large_df)} d√≤ng, {len(large_df.columns)} c·ªôt")
    print(f"   File nh·ªè: {len(small_df)} d√≤ng, {len(small_df.columns)} c·ªôt")
    
    # Ki·ªÉm tra s·ªë l∆∞·ª£ng d√≤ng
    if len(small_df) > len(large_df):
        print("‚ö†Ô∏è  C·∫£nh b√°o: File nh·ªè c√≥ nhi·ªÅu d√≤ng h∆°n file l·ªõn!")
        print("   S·∫Ω ch·ªâ l·∫•y s·ªë d√≤ng t∆∞∆°ng ·ª©ng v·ªõi file nh·ªè")
    
    # L·∫•y c·ªôt th·ª© 2 v√† th·ª© 3 t·ª´ file l·ªõn
    print("\n3. L·∫•y c·ªôt th·ª© 2 v√† th·ª© 3 t·ª´ file l·ªõn...")
    
    if len(large_df.columns) < 3:
        print("‚úó L·ªói: File l·ªõn kh√¥ng c√≥ ƒë·ªß 3 c·ªôt!")
        print(f"   Ch·ªâ c√≥ {len(large_df.columns)} c·ªôt: {list(large_df.columns)}")
        return False
    
    # L·∫•y c·ªôt th·ª© 2 v√† th·ª© 3 (index 1 v√† 2)
    col2_name = large_df.columns[1]
    col3_name = large_df.columns[2]
    
    print(f"  - C·ªôt th·ª© 2: '{col2_name}'")
    print(f"  - C·ªôt th·ª© 3: '{col3_name}'")
    
    # L·∫•y d·ªØ li·ªáu c·ªôt 2 v√† 3, ch·ªâ l·∫•y s·ªë d√≤ng b·∫±ng v·ªõi file nh·ªè
    num_rows = len(small_df)
    col2_data = large_df[col2_name].iloc[:num_rows]
    col3_data = large_df[col3_name].iloc[:num_rows]
    
    print(f"  - L·∫•y {num_rows} d√≤ng d·ªØ li·ªáu ƒë·∫ßu ti√™n")
    
    # Hi·ªÉn th·ªã preview d·ªØ li·ªáu s·∫Ω l·∫•y
    print(f"\nüìã PREVIEW D·ªÆ LI·ªÜU S·∫º L·∫§Y (5 d√≤ng ƒë·∫ßu):")
    preview_data = pd.DataFrame({
        col2_name: col2_data.head(),
        col3_name: col3_data.head()
    })
    print(preview_data.to_string())
    
    # T·∫°o DataFrame k·∫øt qu·∫£
    print("\n4. T·∫°o file k·∫øt qu·∫£...")
    
    # T·∫°o DataFrame m·ªõi v·ªõi c·ªôt 2 v√† 3 t·ª´ file l·ªõn + t·∫•t c·∫£ c·ªôt t·ª´ file nh·ªè
    result_df = pd.DataFrame()
    
    # Th√™m c·ªôt th·ª© 2 v√† th·ª© 3 t·ª´ file l·ªõn
    result_df[col2_name] = col2_data.reset_index(drop=True)
    result_df[col3_name] = col3_data.reset_index(drop=True)
    
    # Th√™m t·∫•t c·∫£ c·ªôt t·ª´ file nh·ªè
    for col in small_df.columns:
        result_df[col] = small_df[col].reset_index(drop=True)
    
    print(f"  - File k·∫øt qu·∫£ c√≥ {len(result_df)} d√≤ng v√† {len(result_df.columns)} c·ªôt")
    print(f"  - Th·ª© t·ª± c·ªôt: {list(result_df.columns)}")
    
    # L∆∞u file k·∫øt qu·∫£
    print(f"\n5. L∆∞u file k·∫øt qu·∫£: {output_file_path}")
    try:
        result_df.to_csv(output_file_path, index=False, encoding='utf-8-sig')
        print("‚úì ƒê√£ l∆∞u file th√†nh c√¥ng!")
        
        # Hi·ªÉn th·ªã preview k·∫øt qu·∫£
        print("\n6. PREVIEW K·∫æT QU·∫¢ (5 d√≤ng ƒë·∫ßu):")
        print("=" * 100)
        print(result_df.head().to_string())
        print("=" * 100)
        
        # Th·ªëng k√™
        print(f"\nüìà TH·ªêNG K√ä K·∫æT QU·∫¢:")
        print(f"   ‚úÖ ƒê√£ gh√©p {len(result_df)} d√≤ng d·ªØ li·ªáu")
        print(f"   ‚úÖ T·ªïng s·ªë c·ªôt: {len(result_df.columns)}")
        print(f"   ‚úÖ Dung l∆∞·ª£ng file: {os.path.getsize(output_file_path) / 1024:.1f} KB")
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói khi l∆∞u file: {e}")
        return False

def main():
    """H√†m ch√≠nh v·ªõi ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh s·∫µn"""
    print("üîó CH∆Ø∆†NG TR√åNH GH√âP D·ªÆ LI·ªÜU CSV")
    print("T√°c gi·∫£: Claude AI")
    print("M√¥ t·∫£: L·∫•y c·ªôt 2 v√† 3 t·ª´ file l·ªõn ƒë·ªÉ b·ªï sung v√†o file nh·ªè\n")
    
    # ƒê∆∞·ªùng d·∫´n file ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    large_file = r"D:\Vscode\flood_point_merge.csv"
    small_file = r"C:\Users\Admin\Downloads\prj\Flood_point\flood_point_merge_cleaned_balanced.csv"
    
    print(f"üìÅ File l·ªõn: {large_file}")
    print(f"üìÅ File nh·ªè: {small_file}")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(large_file):
        print(f"‚úó File l·ªõn kh√¥ng t·ªìn t·∫°i: {large_file}")
        print("üí° Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n!")
        return
        
    if not os.path.exists(small_file):
        print(f"‚úó File nh·ªè kh√¥ng t·ªìn t·∫°i: {small_file}")
        print("üí° Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n!")
        return
    
    # T·∫°o t√™n file output
    output_dir = os.path.dirname(small_file)
    output_name = "merged_" + os.path.basename(small_file)
    output_file = os.path.join(output_dir, output_name)
    
    print(f"\nüì§ File k·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i:")
    print(f"   {output_file}")
    
    # X√°c nh·∫≠n
    print(f"\nüîç TH√îNG TIN FILE:")
    try:
        large_size = os.path.getsize(large_file) / (1024*1024)  # MB
        small_size = os.path.getsize(small_file) / (1024*1024)  # MB
        print(f"   File l·ªõn: {large_size:.1f} MB")
        print(f"   File nh·ªè: {small_size:.1f} MB")
    except:
        pass
    
    confirm = input("\n‚ö° B·∫Øt ƒë·∫ßu x·ª≠ l√Ω? (y/n): ").lower().strip()
    if confirm not in ['y', 'yes', 'c√≥']:
        print("üö´ ƒê√£ h·ªßy!")
        return
    
    # Th·ª±c hi·ªán gh√©p d·ªØ li·ªáu
    success = merge_csv_files(large_file, small_file, output_file)
    
    if success:
        print(f"\nüéâ HO√ÄN TH√ÄNH!")
        print(f"üìÇ File k·∫øt qu·∫£: {output_file}")
        print("‚ú® D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gh√©p th√†nh c√¥ng!")
        
        # M·ªü th∆∞ m·ª•c ch·ª©a file k·∫øt qu·∫£ (Windows)
        if sys.platform.startswith('win'):
            try:
                os.startfile(os.path.dirname(output_file))
                print("üìÅ ƒê√£ m·ªü th∆∞ m·ª•c ch·ª©a file k·∫øt qu·∫£!")
            except:
                pass
    else:
        print("\nüí• X·ª¨ L√ù TH·∫§T B·∫†I!")
        print("‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu v√† th·ª≠ l·∫°i.")

def quick_analysis():
    """Ph√¢n t√≠ch nhanh 2 file tr∆∞·ªõc khi gh√©p"""
    large_file = r"D:\Vscode\flood_point_merge.csv"
    small_file = r"C:\Users\Admin\Downloads\prj\Flood_point\flood_point_merge_cleaned_balanced.csv"
    
    print("üîç PH√ÇN T√çCH NHANH 2 FILE CSV")
    print("=" * 50)
    
    for i, file_path in enumerate([large_file, small_file], 1):
        print(f"\n{i}. File: {os.path.basename(file_path)}")
        if os.path.exists(file_path):
            try:
                df, encoding = read_csv_file(file_path)
                if df is not None:
                    print(f"   üìä Shape: {df.shape}")
                    print(f"   üè∑Ô∏è  Columns: {list(df.columns)}")
                    print(f"   üìù Sample data:")
                    print(f"      {df.iloc[0].to_dict()}")
            except Exception as e:
                print(f"   ‚úó L·ªói: {e}")
        else:
            print(f"   ‚úó File kh√¥ng t·ªìn t·∫°i!")

if __name__ == "__main__":
    # C√†i ƒë·∫∑t encoding cho Windows
    if sys.platform.startswith('win'):
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    
    # Ki·ªÉm tra th∆∞ vi·ªán c·∫ßn thi·∫øt
    try:
        import pandas as pd
    except ImportError:
        print("‚ùå Thi·∫øu th∆∞ vi·ªán pandas!")
        print("üì¶ Vui l√≤ng c√†i ƒë·∫∑t: pip install pandas")
        sys.exit(1)
    
    # Ch·∫°y ch∆∞∆°ng tr√¨nh
    if len(sys.argv) > 1 and sys.argv[1] == 'analyze':
        quick_analysis()
    else:
        main()